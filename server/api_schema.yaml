openapi: 3.0.0
info:
  title: User and Photo API
  version: 1.0.0

paths:
  /api/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                name:
                  type: string
      responses:
        '201':
          description: User registered successfully
        '400':
          description: User already exists
        '500':
          description: Server error

  /api/login:
    post:
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '400':
          description: Invalid email or password
        '500':
          description: Server error

  /api/reset-password-request:
    post:
      summary: Request password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        '200':
          description: Password reset link sent
        '404':
          description: User not found
        '500':
          description: Server error

  /api/profile:
    get:
      summary: Get user profile
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  email:
                    type: string
                  name:
                    type: string
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '500':
          description: Server error
    put:
      summary: Update user profile
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        '200':
          description: Updated user profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  email:
                    type: string
                  name:
                    type: string
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '500':
          description: Server error

  /api/photos:
    post:
      summary: Upload a new photo
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                gender:
                  type: string
                  enum: [male, female, other]
                age:
                  type: number
      responses:
        '201':
          description: Photo uploaded successfully
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /api/photos/{id}/activate:
    post:
      summary: Activate photo for rating
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Photo activated for rating
        '401':
          description: Unauthorized
        '403':
          description: Not authorized
        '404':
          description: Photo not found
        '500':
          description: Server error

  /api/photos/{id}/deactivate:
    post:
      summary: Deactivate photo from rating
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Photo deactivated from rating
        '401':
          description: Unauthorized
        '403':
          description: Not authorized
        '404':
          description: Photo not found
        '500':
          description: Server error

  /api/photos/{id}/stats:
    get:
      summary: Get photo statistics
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Photo statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalRatings:
                    type: number
                  averageScore:
                    type: number
        '401':
          description: Unauthorized
        '403':
          description: Not authorized
        '404':
          description: Photo not found
        '500':
          description: Server error

  /api/photos/random:
    get:
      summary: Get random photo for rating
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: gender
          schema:
            type: string
            enum: [male, female, other]
        - in: query
          name: minAge
          schema:
            type: number
        - in: query
          name: maxAge
          schema:
            type: number
      responses:
        '200':
          description: Random photo for rating
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photo'
        '401':
          description: Unauthorized
        '403':
          description: Not enough points to rate
        '404':
          description: No photos available for rating
        '500':
          description: Server error

  /api/photos/{id}/rate:
    post:
      summary: Rate a photo
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                score:
                  type: number
      responses:
        '200':
          description: Photo rated successfully
        '400':
          description: Photo is not active for rating or already rated
        '401':
          description: Unauthorized
        '403':
          description: Not enough points to rate
        '404':
          description: Photo not found
        '500':
          description: Server error

  /api/user/points:
    get:
      summary: Get user points
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User points
          content:
            application/json:
              schema:
                type: object
                properties:
                  points:
                    type: number
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '500':
          description: Server error

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Photo:
      type: object
      properties:
        _id:
          type: string
        url:
          type: string
        uploadedBy:
          type: string
        isActive:
          type: boolean
        gender:
          type: string
          enum: [male, female, other]
        age:
          type: number
        ratings:
          type: array
          items:
            type: object
            properties:
              user:
                type: string
              score:
                type: number
        totalRatings:
          type: number
        averageScore:
          type: number